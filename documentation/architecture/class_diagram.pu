@startuml "Process Historian"

class cloudBuffer.Buffer {
    - __max_buffer_len: int
    - __buffer: List[influxdb_client.Point]
    - __sem: threading.Semaphore
    + <<Create>> Buffer(max_buffer_len: int, connection_parameters: Dict)
    + append(measurement: str, tags: Optional[List[Tuple[str, str]]],\nvalues: Optional[List[Tuple[str, Any]]],timestamp: Any)
    + append_many(raw_point_list: List)
    + write_points()
    - pop_first(number_of_elements: int)
}
class cloudBuffer.InfluxWrapper{
    - __url: str
    - __token: str
    - __bucket: str
    - __org: str
    - __influxDBClient: influxdb_client.InfluxDBClient
    + <<Create>> InfluxWrapper(connection_parameters: Dict)
    + insert(point: influxdb_client.Point)
    + insert_many(points: List[influxdb_client.Point])
}
cloudBuffer.Buffer --> "1" cloudBuffer.InfluxWrapper : - __influx_wrapper

class opcuaClient.Client {
    - __opcua_config: Dict
    - __url: str
    - __opcua_lib_client: opcua.Client
    - __callback: Callable
    - __callback_many: Callable
    # _nodes2poll: Dict
    # _nodes2sub: Dict
    - __subscription_handles: List
    - __namespace_adapter: Dict
    - __subscription: opcua.Subscription
    - __subHandler: SubscriptionHandler
    +<<Create>> Client(opcua_config: Dict)
    + connect()
    + disconnect(log: bool = True)
    + get_intervals()
    + poll(interval: int)
    + subscribe_all()
    + unsubscribe_all()
    - __init_lists()
    - __get_namespace_indexes()
    - __get_all_namespaces()
    - __create_node_id(namespace: str, identifier: str)
}
class opcuaClient.SubscriptionHandler {
    - __data_callback: Callable
    - __node_dict: Dict
    + <<Create>> SubscriptionHandler(data_callback: Callable, node_dict: Dict)
    + datachange_notification(node: opcua.Node, value, raw_data)
}
class opcuaClient.CustomNode {
    + assembly_type: str
    + assembly_identifier: str
    + attribute_name: str
    + node_obj: opcua.Node
    + <<Create>> CustomNode(assembly_type: str,assembly_identifier: str\nattribute_name: str, opc_node: opcua.Node)
}
opcuaClient.Client +-- opcuaClient.SubscriptionHandler
opcuaClient.Client *-- "*" opcuaClient.CustomNode


class configBuilder.Configurator {
    - __config_loc: str
    + <<Create>> Configurator(connection_parameters: Dict,\nincluded_types: List[str], config_loc: str)
    + write_config()
    + write_debug_config(exists: bool)
    + on_exit()
}
class configBuilder.SPARQLClient{
    - __connection_parameters: Dict
    - __included_types: List[str]
    - __sparql: SPARQLWrapper.SPARQLWrapper
    + <<Create>> SPARQLClient(connection_parameters: Dict,\nincluded_types: List[str])
    + connect()
    + disconnect()
    + get_all_nodes()
}
configBuilder.Configurator --> "1" configBuilder.SPARQLClient: - __sparql_client

class ProcessHistorian {
    + heartbeat_interval_seconds
    - __script_location: str
    - __config_folder: str
    - __program_conf_loc: str
    - __opcua_conf_loc: str
    - __schemata_loc: str
    - __program_conf: Dict
    - __opcua_conf: Dict
    - __push_thread: threading.Thread
    - __opc_threads: List[threading.thread]
    + <<Create>> ProcessHistorian()
    + {static} create_empty_program_config(location: Union[str, pathlib.Path])
    + wait_for_new_opc_connection()
    + listen_for_opc_heartbeat()
    + opc_defibrillator()
    + resubscribe_opc()
    + exit(silent_exit_mode: Optional[str])
    - __load_program_config()
    - __parse_program_conf()
    - __parse_opcua_conf()
}
ProcessHistorian *-- "1" cloudBuffer.Buffer: # _buffer
ProcessHistorian *-- "1" opcuaClient.Client: # _opcua_client
ProcessHistorian *-- "1" configBuilder.Configurator: # _config_builder
ProcessHistorian +-- ProcessHistorianThread
ProcessHistorian *-- "1" ProcessHistorianThread: - __push_thread_obj
ProcessHistorian *-- "*" ProcessHistorianThread: - __opc_thread_objs

class ProcessHistorianThread {
    - __work_function: Callable
    - __argument: Optional[Any]
    - __interval: int
    - __should_exit: threading.Event
    + <<Create>> ProcessHistorianThread(work_function: Callable,\nargument: Optional[Any], interval: int)
    + should_exit()
    + work()
}

@enduml